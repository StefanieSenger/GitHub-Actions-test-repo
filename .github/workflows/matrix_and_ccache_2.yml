name: matrix_with_ccache

on:
  push:
    branches: [ "main" ]
  pull_request_target:
    types:
      - labeled

env:
  CCACHE_DIR: ${{ github.workspace }}/ccache

jobs:
  matrix_job:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: matrix_for_ubuntu
            os: ubuntu-latest
            ENVIRONMENTAL_VARIABLE: this_is_our_environmental_variable_for_ubuntu
          - name: matrix_for_mac_os
            os: macOS-latest
            ENVIRONMENTAL_VARIABLE: this_is_our_environmental_variable_for_mac_os
          - name: matrix_for_windows
            os: windows-latest
            ENVIRONMENTAL_VARIABLE: this_is_our_environmental_variable_for_windows
          - name: matrix_for_ubuntu_2
            os: ubuntu-latest
            ENVIRONMENTAL_VARIABLE: this_is_our_environmental_variable_for_ubuntu_2
    
    env:
      ENVIRONMENTAL_VARIABLE: ${{ matrix.ENVIRONMENTAL_VARIABLE }}

    steps:

      - name: Install ccache tool
        if: runner.os != 'Windows' # more complicated on windows
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt update && sudo apt install -y ccache
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install ccache
          fi

      - name: Check out repository
        uses: actions/checkout@v4

      - name: create cache for ccache
        uses: actions/cache@v4
        id: ccache_id
        with:
          path: ${{ github.workspace }}/ccache #~/.cache/ccache for ubuntu, on mac is Library/Caches/ccache or use CCACHEDIR environment variable
          # key is unique identifier used the access this cache
          key: ${{ runner.os }}-ccache- # probably need to use hashFiles to construct the key

      - name: print runner workspace
        run: |
          echo ${{ runner.workspace }}
          echo ${{ github.workspace }}

      - name: set up conda
        uses: conda-incubator/setup-miniconda@v3

      - name: print environmental variable
        run: echo $ENVIRONMENTAL_VARIABLE

      - name: print if cache was not found
        if: ${{ steps.ccache_id.outputs.cache-hit != 'true' }}
        run: echo Cache was not found.

      - name: print path to ccache folder
        run: ccache -p

      - name: Compile C code
        run: | # first line (export ...) is maybe not needed
          export CC='ccache gcc'
          echo Compiling...
          ccache gcc -c scr/hello.c -o hello.o

      - name: show ccache statistics
        if: runner.os != 'Windows' # more complicated on windows
        run: ccache --show-stats

      - name: install environment and run test suite
        run: |
          conda create --yes --name conda_environment pytest
          conda run --name conda_environment pytest tests/test_file.py
